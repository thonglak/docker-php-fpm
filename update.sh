#!/bin/bash
#
# @package php/alpine/fpm
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#

generate_dockerfile(){
    local dockerfile version
    version=$1
    case ${version} in
        latest)
            image="fpm-alpine"
            ;;
        [0-9]*)
            image="${1}-fpm-alpine"
            ;;
    esac
    dockerfile=./${version}/Dockerfile
    cat > ${dockerfile} <<TEMPLATE
#
# This file is auto-generated by update.sh
#
# @package php/alpine/fpm
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#

FROM php:${image}

ARG PHP_EXTS="pdo_mysql pdo_pgsql intl opcache bcmath"

LABEL author="Yannoff <https://github.com/yannoff>" \\
      description="PHP-FPM with basic php extensions and composer" \\
      license="MIT"

ENV MUSL_LOCPATH /usr/local/share/i18n/locales/musl

# Fix ICONV library implementation
# @see https://github.com/docker-library/php/issues/240
ENV LD_PRELOAD /usr/local/lib/preloadable_libiconv.so

COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/bin/

# Install basic packages & PHP extensions
RUN \\
    REMOTE_SCRIPTS_URL=https://raw.githubusercontent.com/yannoff/alpine-tools/master/bin; \\
    \\
    apk add --update bash git; \\
    \\
    install-php-extensions \${PHP_EXTS} >/dev/null; \\
    \\
    # Install support for locales
    # @see https://github.com/gliderlabs/docker-alpine/issues/144
    curl -s \${REMOTE_SCRIPTS_URL}/install-locales | bash; \\
    \\
    # Fix ICONV library implementation
    # @see https://github.com/docker-library/php/issues/240
    curl -s \${REMOTE_SCRIPTS_URL}/rebuild-iconv-lib | bash; \\
    \\
    # Install composer & offenbach
    curl -s \${REMOTE_SCRIPTS_URL}/install-composer | bash; \\
    \\
    # Cleanup:
    # - purge APK repository cache
    # - remove PHP source tarballs
    rm -v /var/cache/apk/*; \\
    rm -rf /usr/src/*;
TEMPLATE

}

if [ $# -eq 0 ]
then
    printf "Usage: %s <version> [<version> [<version>]]\n" $0
    exit 1
fi

for v in "$@"
do
    printf "Generating dockerfile for version %s..." ${v}
    mkdir -p $v 2>/dev/null
    generate_dockerfile $v
    printf "\033[01;32mOK\033[00m\n"
done
printf "\nCopying latest version to root Dockerfile..."
cp latest/Dockerfile . 2>/dev/null
printf "\033[01;32mOK\033[00m\n"
